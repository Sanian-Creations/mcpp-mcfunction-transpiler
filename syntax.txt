----------------------
    syntax of mc++
----------------------
none of this is final.
----------------------

comments.

	// line comment
	
	/*
		block comment
		contains loads of stuff
	*/


at the top of each file, define the namespace. one namespace per file.

	namespace "something";
	

functions are defined with the keyword 'func' or 'function' (pick one, i don't care) followed by the name of the function.
since we're transpiling to mcfunction, any name you'd give a function file is allowed here as well.
unfortunately we can't allow more symbols than mcfunction files, so names are still limited to:
digits, lowercase letters, underscores (_), dots (.) and dashes (-) 

	func 4ny_chars.n0rm4l_funct1ons.have {
		// you can even start function names with a digit, even though that makes parsing a headache.
	}

	function bit_more_formal {
		 
	}


keyword 'load' adds this function to the load function tag.

	load function main {
	
	}


keyword 'tick' adds this function to the tick function tag.

	tick function init {
	
	}


keywords can be stacked but you probably shouldn't do that.

manually write commands by starting a line with '/'.
a line still needs to end with ';' because this allows multi-line commands which can make readability much better.

	/execute as @a[tag=lmao] at @s
	  if entity @e[type=armor_stand,distance=..5]
	  if score @s temp matches 69
	  store result score name objective
	  run say "yoyoyo";


alternatively, a 'raw' block pastes its content directly into the resulting files.
it's content isn't checked, so if you make a mistake you'll have to figure that out yourself!

	@{
		say hi
		tellraw @a "yoyoyo!"
		# mcfunction comment
		scoreboard players set @s temp 69
	}@


single line if statements can be made

	if (x) /say hi;


block if-statements can be made

	if (x) {
		//...
	}


else is also supported

	if (x) {
		//...
	} else {
		//...
	}


create loops

	while (x) {
		//...
		score i vars ++
	}

essentially, every instance of { ... } gets turned into an mcfunction file,
with the exception of raw blocks @{ ... }@


----------------------------------------------------
Planned features, I'm still uncertain of the syntax:

Maybe you have some repetitive command with minor differences you want to run, like this:

	execute store result score RequiredPlayerRange SCspawnerData run data get block ~ ~ ~ RequiredPlayerRange
	execute store result score MaxNearbyEntities SCspawnerData run data get block ~ ~ ~ MaxNearbyEntities
	execute store result score MaxSpawnDelay SCspawnerData run data get block ~ ~ ~ MaxSpawnDelay
	execute store result score MinSpawnDelay SCspawnerData run data get block ~ ~ ~ MinSpawnDelay
	execute store result score SpawnRange SCspawnerData run data get block ~ ~ ~ SpawnRange
	execute store result score SpawnCount SCspawnerData run data get block ~ ~ ~ SpawnCount
	execute store result score SpawnData SCspawnerData run data get block ~ ~ ~ SpawnData
	execute store result score SpawnPotentials SCspawnerData run data get block ~ ~ ~ SpawnPotentials

It would be nice if this could be shortened to simply an array of the values that change, and then use that as input to something like a format string
	
	foreach x in ["RequiredPlayerRange", "MaxNearbyEntities", "MaxSpawnDelay", "MinSpawnDelay", "SpawnRange", "SpawnCount", "SpawnData", "SpawnPotentials"]
		f/execute store result score %x SCspawnerData run data get block ~ ~ ~ %x;

Or using the same concept but with a set of commands that change in a particular pattern

	particle minecraft:end_rod ~0.5 ~0.5 ~0.5 0 0 0 0 1 normal @s
	particle minecraft:end_rod ~-0.5 ~0.5 ~0.5 0 0 0 0 1 normal @s
	particle minecraft:end_rod ~0.5 ~-0.5 ~0.5 0 0 0 0 1 normal @s
	particle minecraft:end_rod ~-0.5 ~-0.5 ~0.5 0 0 0 0 1 normal @s
	particle minecraft:end_rod ~0.5 ~0.5 ~-0.5 0 0 0 0 1 normal @s
	particle minecraft:end_rod ~-0.5 ~0.5 ~-0.5 0 0 0 0 1 normal @s
	particle minecraft:end_rod ~0.5 ~-0.5 ~-0.5 0 0 0 0 1 normal @s
	particle minecraft:end_rod ~-0.5 ~-0.5 ~-0.5 0 0 0 0 1 normal @s

Would become

	foreach x,y,z in [0.5, -0.5] * [0.5, -0.5] * [0.5, -0.5]
		f/particle minecraft:end_rod ~%x ~%y ~%z 0 0 0 0 1 normal @s;



Some way to make tellraw text a little easier. From this:

	tellraw @s ["",{"text": "RequiredPlayerRange","color": "aqua"},": ",{"score": {"name": "RequiredPlayerRange","objective": "SCspawnerData"},"color": "gold"},{"text": "s ","color": "red"},{"text": "[Change]","color": "light_purple","hoverEvent": {"action": "show_text","value": "§bRequiredPlayerRange"},"clickEvent": {"action": "run_command","value": "/function sc_edit_spawners:input/place_input/requiredplayerrange_attempt"}}]

to something along the lines of this:

// stylesheets?
style {
 _ {},
 a {color: aqua},
 s {color: red},
 g {color: gold},
 c {
    color: light_purple,
    click {
       hoverEvent {
         action: show_text,
         value: §bRequiredPlayerRange
       },
       clickEvent {
         action: run_command,
         value: /function sc_edit_spawners:input/place_input/requiredplayerrange_attempt
       }
     }
   }
}

// this	
tellraw @s f"%aRequiredPlayerRange%_: %g%{score(RequiredPlayerRange, SCspawnerData)}%ss %lp[Change]"

// or for the most clarity: just typing the string and adding colour some other way
tellraw @s {
	"RequiredPlayerRange: %s [Change]"
	"^                  ^ ^^ ^"
	"a                  _ gs c"
}

// or this
a  "RequiredPlayerRange",
_  ": ",
g  score(RequiredPlayerRange, SCspawnerData),
s  "s ",
c "[Change]"


// or this
a>"RequiredPlayerRange", ": ", g>score(RequiredPlayerRange, SCspawnerData), s>"s ", c>"[Change]"


// or this
a="RequiredPlayerRange",
": ",
g=score(RequiredPlayerRange, SCspawnerData),
s="s ",
c="[Change]"


// maybe, this
tellraw @s (
	"RequiredPlayerRange".a, ": ", score(RequiredPlayerRange, SCspawnerData).g, "s ".s, "[Change]".c
)
